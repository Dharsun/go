import re
import zipfile
from jinja2 import Template
import argparse

# Define your keywords and regular expression patterns
keywords = {
    'email': r'srv.*AP\d+[A-Za-z]*',
    'password': r'.*?(?:secret|password).*?"(.*?)"',
    # Add more keywords and patterns as needed
}

def search_in_zip(zip_filename, keyword_patterns):
    results = {keyword: [] for keyword in keyword_patterns.keys()}
    
    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:
        for file_info in zip_ref.infolist():
            with zip_ref.open(file_info) as file:
                try:
                    content = file.read().decode('utf-8')
                except UnicodeDecodeError:
                    print(f"UnicodeDecodeError in {file_info.filename}. Trying alternative encodings...")
                    alternative_encodings = ['utf-8', 'latin-1']
                    for encoding in alternative_encodings:
                        try:
                            content = file.read().decode(encoding)
                            print(f"Decoded {file_info.filename} using {encoding} encoding.")
                            break
                        except UnicodeDecodeError:
                            pass
                    else:
                        print(f"Could not decode {file_info.filename}. Skipping...")
                        continue
                
                for keyword, pattern in keyword_patterns.items():
                    try:
                        matches = re.findall(pattern, content, re.IGNORECASE)
                    except re.error:
                        print(f"Error in regular expression for '{keyword}': {pattern}")
                        continue
                    
                    if matches:
                        results[keyword].extend([(match, file_info.filename) for match in matches])
    
    return results

# Rest of the code remains the same

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Generate a keyword search report from a zip file.")
    parser.add_argument("zip_filename", type=str, help="Name of the zip file to search in")
    args = parser.parse_args()

    main(args.zip_filename)
