def search_in_zip(zip_filename, keyword_patterns):
    results = {keyword: [] for keyword in keyword_patterns.keys()}
    
    with zipfile.ZipFile(zip_filename, 'r') as zip_ref:
        for file_info in zip_ref.infolist():
            if not file_info.is_dir():  # Skip directories

                # Check if the file is of a known text-based type (you can extend this list)
                if file_info.filename.lower().endswith(('.txt', '.html', '.xml', '.json')):
                    with zip_ref.open(file_info) as file:
                        try:
                            content = file.read().decode('utf-8')
                        except UnicodeDecodeError:
                            print(f"UnicodeDecodeError in {file_info.filename}. Trying alternative encodings...")
                            alternative_encodings = ['utf-8', 'latin-1']
                            for encoding in alternative_encodings:
                                try:
                                    content = file.read().decode(encoding)
                                    print(f"Decoded {file_info.filename} using {encoding} encoding.")
                                    break
                                except UnicodeDecodeError:
                                    pass
                            else:
                                print(f"Could not decode {file_info.filename}. Skipping...")
                                continue
                else:
                    print(f"Skipping non-textual file: {file_info.filename}")
                    continue
                
                for keyword, pattern in keyword_patterns.items():
                    try:
                        matches = re.findall(pattern, content, re.IGNORECASE)
                    except re.error:
                        print(f"Error in regular expression for '{keyword}': {pattern}")
                        continue
                    
                    if matches:
                        results[keyword].extend([(match, file_info.filename) for match in matches])
    
    return results
